type Room
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      {
        allow: private
        provider: userPools
        operations: [read, create, delete, update]
      }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  isOpened: Boolean!
  ttl: AWSTimestamp @ttl
  participants: [Participant] @hasMany(indexName: "byRoom", fields: ["id"])
}

type Participant
  @model
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      {
        allow: private
        provider: userPools
        operations: [read, create, delete, update]
      }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  username: String!
  displayUserName: String!
  point: Int
  ttl: AWSTimestamp @ttl
  roomParticipantsId: ID! @index(name: "byRoom")
  room: Room @belongsTo(fields: ["roomParticipantsId"])
}

type Subscription {
  # Room
  onUpdateRoomById(id: ID!): Room
    @aws_subscribe(mutations: ["updateRoom"])
    @aws_iam
    @aws_cognito_user_pools
  # Participant
  onCreateParticipantByRoomId(roomParticipantsId: String): Participant
    @aws_subscribe(mutations: ["createParticipant"])
    @aws_iam
    @aws_cognito_user_pools
  onDeleteParticipantByRoomId(roomParticipantsId: String): Participant
    @aws_subscribe(mutations: ["deleteParticipant"])
    @aws_iam
    @aws_cognito_user_pools
  onUpdateParticipantByRoomId(roomParticipantsId: String): Participant
    @aws_subscribe(mutations: ["updateParticipant"])
    @aws_iam
    @aws_cognito_user_pools
}
